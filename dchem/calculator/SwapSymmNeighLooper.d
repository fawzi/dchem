/// builds a calculator that has only a subset as active part
module dchem.calculator.SwapSymmNeighLooper;
import dchem.sys.ParticleRange;
import dchem.Common;
import blip.serialization.Serialization;
import dchem.sys.ParticleSys;
import dchem.sys.PIndexes;
import dchem.sys.SubMapping;
import blip.BasicModels;
import blip.io.BasicIO;
import blip.container.GrowableArray;
import blip.container.BulkArray;
import dchem.input.RootInput;
import dchem.sys.DynVars;
import dchem.calculator.CalculatorModels;
import dchem.calculator.Calculator;
import blip.parallel.mpi.Mpi;
import blip.parallel.smp.Wait;
import dchem.calculator.ProcContext;


/// uses the SymmNeighLooper of the full system
class SwapSymmNeighLooperGen:SymmNeighLooperGen{
    bool useFirstNeigh=true;
    InputField[] groups;
    mixin(serializeSome("dchem.SwapSymmNeighLooper",`
    useFirstNeigh: if first image convention should be used for periodic dimensions (default is true)
    groups: the groups that should be swapped (ParticleRange), all permutations within one group are checked`));
    mixin myFieldMixin!();
    mixin printOut!();
    bool verify(CharSink s){
        bool res=true;
        foreach (g;groups){
            if (g is null){
                dumper(s)("elements of groups should not be null in field ")(myFieldName)("\n");
                res=false;
            } else if ((cast(ParticleRange)g) is null){
                dumper(s)("elements of groups should be ParticleRanges null in field ")(myFieldName)("\n");
                res=false;
            }
        }
        return res;
    }
    SymmNeighLooper symmNeighLooperForContext(CalculationContext ctx){
        return new SwapSymmNeighLooper(this,ctx);
    }
}

/// an object that loops on all symmetry equivalent structures generated by neigh that are within epsilon of pSys
/// using the looper of the full  system
class SwapSymmNeighLooper:SymmNeighLooper{
    SwapSymmNeighLooperGen input;
    CalculationContext ctx;

    this(SwapSymmNeighLooperGen input,CalculationContext ctx){
        this.input=input;
        this.ctx=ctx;
    }
    void loopOnNeighWithinT(T)(ParticleSys!(T)pSys,DistOps distOps,DynPVector!(T,XType)neigh,T epsilon,
        int delegate(ref DynPVector!(T,XType))loopBody)
    {
        // sequential, non cached version
        size_t lTot=0;
        auto groupIdx=new BulkArray!(PIndex)[](input.groups.length);
        auto allIdx=pSys.particlePropertiesPools.particlePropertyT!(int)();
        allIdx[]=0;
        foreach(iGroup,groupF;input.groups){
            size_t lG=0;
            foreach(block;groupF.contentT!(ParticleRange)().loopOn(pSys.sysStruct)){
                lG+=block.length;
                foreach(pIdx;block){
                    (*allIdx.ptrI(pIdx,0))+=1;
                }
            }
            groupIdx[iGroup]=BulkArray!(PIndex)(lG);
            lTot+=lG;
        }
        T distAtt=0;
        // do non swapping els
        /+foreach(k;neigh.kRange){
            
        }
        // no swap dists
        auto dist=pSys.particlePropertiesPools.newArray(neigh.kRange);
        pSys.dynVars.x.pos+/
    }
    // aliases don't work reliably
    void loopOnNeighWithin(ParticleSys!(Real)pSys,DistOps distOps,DynPVector!(Real,XType)neigh,Real epsilon,
        int delegate(ref DynPVector!(Real,XType))loopBody)
    {
        loopOnNeighWithinT!(Real)(pSys,distOps,neigh,epsilon,loopBody);
    }
    void loopOnNeighWithin(ParticleSys!(LowP)pSys,DistOps distOps,DynPVector!(LowP,XType)neigh,LowP epsilon,
        int delegate(ref DynPVector!(LowP,XType))loopBody)
    {
        loopOnNeighWithinT!(LowP)(pSys,distOps,neigh,epsilon,loopBody);
    }
    void loopOnNeighWithinReal(ParticleSys!(Real)pSys,DistOps distOps,DynPVector!(Real,XType)neigh,Real epsilon,
        int delegate(ref DynPVector!(Real,XType))loopBody)
    {
        loopOnNeighWithinT!(Real)(pSys,distOps,neigh,epsilon,loopBody);
    }
    void loopOnNeighWithinLowP(ParticleSys!(LowP)pSys,DistOps distOps,DynPVector!(LowP,XType)neigh,LowP epsilon,
        int delegate(ref DynPVector!(LowP,XType))loopBody)
    {
        loopOnNeighWithinT!(LowP)(pSys,distOps,neigh,epsilon,loopBody);
    }
}
